<?php
/********************************************************/
/* プログラム名：ExecuteModel.php                       */
/*======================================================*/
/* 概要：データベースへのアクセスを行う、抽象クラス     */
/*======================================================*/
/* 作成日：2016-9-5                                     */
/* 作成者：鶴田 博文                                    */
/* 最終更新日：                                         */
/* 更新者：                                             */
/********************************************************/
abstract class ExecuteModel
{
    protected $_pdo;  // PDOオブジェクトを保持するプロパティ

    /*コンストラクター*/
    public function __construct($pdo){
        $this->setPdo($pdo);
    }

    /********************************************************/
    /* Public Function                                      */
    /*======================================================*/
    /* 関数名: setPdo                                       */
    /*======================================================*/
    /* 概要  : PDOオブジェクトをプロパティにセットする      */
    /* 引数  : PDOオブジェクト                              */
    /* 戻り値: なし                                         */
    /********************************************************/
    public function setPdo($pdo){
        $this->_pdo = $pdo;
    }

    /********************************************************/
    /* Public Function                                      */
    /*======================================================*/
    /* 関数名: execute                                      */
    /*======================================================*/
    /* 概要  : SQLのクエリを発行するメソッド                */
    /* 引数  : SQL文、プレースホルダーと値の連想配列        */
    /* 戻り値: PDOStatementオブジェクト                     */
    /********************************************************/
    public function execute($sql, $parameter = array()){
      // プリペアドステートメントを生成
      $stmt = $this->_pdo->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
      $stmt->execute($parameter);
      // 戻り値としてPDOStatementオブジェクトを返す
      return $stmt;
    }

    /********************************************************/
    /* Public Function                                      */
    /*======================================================*/
    /* 関数名: getAllRecord                                 */
    /*======================================================*/
    /* 概要  : クエリの結果をすべて取得するメソッド         */
    /* 引数  : SQL文、プレースホルダーと値の連想配列        */
    /* 戻り値: レコードデータ                               */
    /********************************************************/
    public function getAllRecord($sql, $parameter = array()) {
      $all_rec = $this->execute($sql, $parameter)
                      ->fetchAll(PDO::FETCH_ASSOC);
      return $all_rec;
    }

    /********************************************************/
    /* Public Function                                      */
    /*======================================================*/
    /* 関数名: getRecord                                    */
    /*======================================================*/
    /* 概要  : クエリの結果を1件だけ取得するメソッド        */
    /* 引数  : SQL文、プレースホルダーと値の連想配列        */
    /* 戻り値: レコードデータ(1件のみ)                      */
    /********************************************************/
    public function getRecord($sql, $parameter = array()){
      $rec = $this->execute($sql, $parameter)
                  ->fetch(PDO::FETCH_ASSOC);
      return $rec;
    }
}
